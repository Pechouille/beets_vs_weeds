name: Deploy Docker Image from Artifact Registry to Compute Engine

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build and Push to Artifact Registry"]
    types:
      - completed

jobs:
  deploy_docker:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.SERVICE_ACCOUNT_KEY }}"
          project_id: ${{ vars.PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Use gcloud CLI
        run: gcloud info

      - name: Docker auth
        run: |
          gcloud auth configure-docker ${{ vars.ARTIFACT_REGION }}-docker.pkg.dev --quiet

      - name: Verify image exists
        run: |
          if ! gcloud artifacts docker images describe \
            ${{ vars.ARTIFACT_REGION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.ARTIFACT_REGISTRY }}/${{ vars.IMAGE_NAME }}:latest; then
            echo "‚ùå Docker image not found in Artifact Registry"
            exit 1
          fi
          echo "‚úÖ Docker image verified in Artifact Registry"

      - name: Create or update instance
        run: |
          if ! gcloud compute instances describe prod-instance --zone=europe-west9-a > /dev/null 2>&1; then
              echo "üöÄ Creating new instance: prod-instance"
              gcloud compute instances create-with-container prod-instance \
                --zone=europe-west9-a \
                --machine-type=e2-standard-4 \
                --container-image=${{ vars.ARTIFACT_REGION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.ARTIFACT_REGISTRY }}/${{ vars.IMAGE_NAME }}:latest \
                --container-restart-policy=always \
                --container-env=PORT=8080,DATA_SIZE=${{ vars.DATA_SIZE }},CHUNK_SIZE=${{ vars.CHUNK_SIZE }},FILE_ORIGIN=gcp,MODEL_TARGET=gcs,GCP_PROJECT=${{ vars.PROJECT_ID }},GCP_REGION=${{ vars.GCP_REGION }},BUCKET_NAME=${{ vars.BUCKET_NAME }} \
                --tags=http-server \
                --scopes=https://www.googleapis.com/auth/cloud-platform \
                --boot-disk-size=100GB \
                --boot-disk-type=pd-standard \
                --image-family=cos-stable \
                --image-project=cos-cloud
          else
              echo "üîÑ Instance exists, updating container..."
              gcloud compute instances update-container prod-instance \
                --zone=europe-west9-a \
                --container-image=${{ vars.ARTIFACT_REGION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.ARTIFACT_REGISTRY }}/${{ vars.IMAGE_NAME }}:latest \
                --container-env=PORT=8080,DATA_SIZE=${{ vars.DATA_SIZE }},CHUNK_SIZE=${{ vars.CHUNK_SIZE }},FILE_ORIGIN=gcp,MODEL_TARGET=gcs,GCP_PROJECT=${{ vars.PROJECT_ID }},GCP_REGION=${{ vars.GCP_REGION }},BUCKET_NAME=${{ vars.BUCKET_NAME }}
          fi



      - name: Wait for instance to be ready
        run: |
          echo "‚è≥ Waiting for instance to be ready..."
          timeout 300 bash -c 'until gcloud compute instances describe ${{ vars.COMPUTE_ENGINE_INSTANCE_NAME }} --zone=${{ vars.COMPUTE_ENGINE_ZONE }} --format="get(status)" | grep -q "RUNNING"; do sleep 10; done'

      - name: Get deployment details
        run: |
          EXTERNAL_IP=$(gcloud compute instances describe ${{ vars.COMPUTE_ENGINE_INSTANCE_NAME }} \
            --zone=${{ vars.COMPUTE_ENGINE_ZONE }} \
            --format='get(networkInterfaces[0].accessConfigs[0].natIP)')

          echo "üéâ Application deployed successfully!"
          echo "üìç Instance: ${{ vars.COMPUTE_ENGINE_INSTANCE_NAME }}"
          echo "üåç Zone: ${{ vars.COMPUTE_ENGINE_ZONE }}"
          echo "üîó External IP: $EXTERNAL_IP"
          echo "üåê Access URL: http://$EXTERNAL_IP:8080"
