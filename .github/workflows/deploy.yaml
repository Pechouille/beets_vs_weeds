name: Deploy Docker Image from Artifact Registry to Compute Engine

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build and Push to Artifact Registry"]
    types:
      - completed
env:
  PROJECT_ID: ${{ vars.PROJECT_ID }}
  ARTIFACT_REGION: ${{ vars.ARTIFACT_REGION }}
  ARTIFACT_REGISTRY: ${{ vars.ARTIFACT_REGISTRY }}
  ARTIFACT_IMAGE_NAME: ${{ env.ARTIFACT_IMAGE_NAME }}
  COMPUTE_ENGINE_INSTANCE_NAME: ${{ env.COMPUTE_ENGINE_INSTANCE_NAME }}
  COMPUTE_ENGINE_ZONE: ${{ env.COMPUTE_ENGINE_ZONE }}
  COMPUTE_ENGINE_MACHINE_TYPE: ${{ env.COMPUTE_ENGINE_MACHINE_TYPE }}
  GCP_REGION: ${{ env.GCP_REGION }}
  DATA_SIZE: ${{ env.DATA_SIZE }}
  CHUNK_SIZE: ${{ env.CHUNK_SIZE }}
  SERVICE_ACCOUNT_KEY: ${{ secrets.SERVICE_ACCOUNT_KEY }}

jobs:
  deploy_docker:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create env_vars.yaml
        run: |
          cat <<EOF > env_vars.yaml
          env:
          - name: PORT
            value: "8080"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: ${{ secrets.SERVICE_ACCOUNT_KEY }}
          - name: DATA_SIZE
            value: ${{ env.DATA_SIZE }}
          - name: CHUNK_SIZE
            value: ${{ env.CHUNK_SIZE }}
          - name: FILE_ORIGIN
            value: gcp
          - name: MODEL_TARGET
            value: gcs
          - name: GCP_PROJECT
            value: la-wagon-bootcamp-datascience
          - name: GCP_REGION
            value: ${{ env.GCP_REGION }}
          - name: BUCKET_NAME
            value: beets_vs_weeds
          EOF

      - name: Example Step
        run: |
          echo "Project ID: $PROJECT_ID"
          echo "Artifact Region: ${{ env.ARTIFACT_REGION }}"
          echo "Artifact Registry: ${{ env.ARTIFACT_REGISTRY }}"
          echo "Artifact Image Name: ${{ env.ARTIFACT_IMAGE_NAME }}"
          echo "Compute Engine Instance Name: ${{ env.COMPUTE_ENGINE_INSTANCE_NAME }}"
          echo "Compute Engine Zone: ${{ env.COMPUTE_ENGINE_ZONE }}"
          echo "Compute Engine Machine Type: ${{ env.COMPUTE_ENGINE_MACHINE_TYPE }}"

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.SERVICE_ACCOUNT_KEY }}"
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Use gcloud CLI
        run: gcloud info

      - name: Docker auth
        run: |
          gcloud auth configure-docker ${{ env.ARTIFACT_REGION }}-docker.pkg.dev --quiet

      - name: Verify image exists
        run: |
          if ! gcloud artifacts docker images describe \
            ${{ env.ARTIFACT_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/${{ env.ARTIFACT_IMAGE_NAME }}:latest; then
            echo "‚ùå Docker image not found in Artifact Registry"
            exit 1
          fi
          echo "‚úÖ Docker image verified in Artifact Registry"

      - name: Create or update instance
        run: |
          if ! gcloud compute instances describe ${{ env.COMPUTE_ENGINE_INSTANCE_NAME }} --zone=${{ env.COMPUTE_ENGINE_ZONE }} > /dev/null 2>&1; then
            echo "üöÄ Creating new instance: ${{ env.COMPUTE_ENGINE_INSTANCE_NAME }}"
            gcloud compute instances create-with-container ${{ env.COMPUTE_ENGINE_INSTANCE_NAME }} \
              --zone=${{ env.COMPUTE_ENGINE_ZONE }} \
              --machine-type=${{ env.COMPUTE_ENGINE_MACHINE_TYPE }} \
              --container-image=${{ env.ARTIFACT_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/${{ env.ARTIFACT_IMAGE_NAME }}:latest \
              --container-restart-policy=always \
              --container-env-file=env_vars.yaml \
              --tags=http-server \
              --scopes=https://www.googleapis.com/auth/cloud-platform \
              --boot-disk-size=100GB \
              --boot-disk-type=pd-standard \
              --image-family=cos-stable \
              --image-project=cos-cloud
          else
            echo "üîÑ Instance exists, updating container..."
            gcloud compute instances update-container ${{ env.COMPUTE_ENGINE_INSTANCE_NAME }} \
              --zone=${{ env.COMPUTE_ENGINE_ZONE }} \
              --container-image=${{ env.ARTIFACT_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/${{ env.ARTIFACT_IMAGE_NAME }}:latest \
              --container-env-file=env_vars.yaml
          fi

      - name: Wait for instance to be ready
        run: |
          echo "‚è≥ Waiting for instance to be ready..."
          timeout 300 bash -c 'until gcloud compute instances describe ${{ env.COMPUTE_ENGINE_INSTANCE_NAME }} --zone=${{ env.COMPUTE_ENGINE_ZONE }} --format="get(status)" | grep -q "RUNNING"; do sleep 10; done'

      - name: Get deployment details
        run: |
          EXTERNAL_IP=$(gcloud compute instances describe ${{ env.COMPUTE_ENGINE_INSTANCE_NAME }} \
            --zone=${{ env.COMPUTE_ENGINE_ZONE }} \
            --format='get(networkInterfaces[0].accessConfigs[0].natIP)')

          echo "üéâ Application deployed successfully!"
          echo "üìç Instance: ${{ env.COMPUTE_ENGINE_INSTANCE_NAME }}"
          echo "üåç Zone: ${{ env.COMPUTE_ENGINE_ZONE }}"
          echo "üîó External IP: $EXTERNAL_IP"
          echo "üåê Access URL: http://$EXTERNAL_IP:8080"
